name: 'macOS DMG'

on:
  workflow_dispatch:
  push:
    branches:
      - 'tbd'
  # pull_request:
  #   branches:
  #     - '**'
  #     - '!master'
  #     - '!pyup/**'
    paths-ignore:
      - 'docs/**'
      - "*.md"

env:
  # Enable strict unpack mode to catch file duplication problems in onefile builds (at executable run-time).
  # PYINSTALLER_STRICT_UNPACK_MODE: 1
  # # Enable strict collect mode to catch file duplication problems in PKG/Carchive (onefile builds) or COLLECT
  # # (onedir builds) at build time.
  # PYINSTALLER_STRICT_COLLECT_MODE: 1
  # # Enable strict handling of codesign errors for macOS bundles.
  # PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR: 1
  # # Enable strict verification of macOS bundles w.r.t. the code-signing requirements.
  # PYINSTALLER_VERIFY_BUNDLE_SIGNATURE: 1
  # # Enable PEP 597 EncodingWarnings
  PYTHONWARNDEFAULTENCODING: true
  APPNAME: PyGlossaryMac
  DIST_DIR: dist.pyinstaller


jobs:
  build_macos:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        python-version: ['3.12']
        os: ['macos-13', 'macos-14']
        # Split macOS workflows between macos-13 (x86_64) and macos-14 (arm64)
        # runners to cover both architectures without running all combinations.
        exclude:
          # - python-version: '3.8'
          #   os: 'macos-14'
          # - python-version: '3.10'
          #   os: 'macos-14'
          - python-version: '3.12'
            os: 'macos-14'
          # - python-version: '3.9'
          #   os: 'macos-13'
          # - python-version: '3.11'
          #   os: 'macos-13'
          - python-version: '3.13'
            os: 'macos-13'
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          
      - name: Update brew
        run: |
          brew update
          
      - name: Install brew dependencies
        run: |
          brew install \
             lzo \
             glib \
             libffi \
             gettext \
             gtk+3 \
             pkg-config \
             py3cairo \
             cairo \
             intltool \
             icu4c \
             create-dmg
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set cache dir
        run: echo "pip_cache_dir=$(pip cache dir)" >> $GITHUB_ENV
        shell: bash

      - name: Fetch cache
        id: cache-target
        uses: actions/cache@v4
        with:
          path: ${{ env.pip_cache_dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}

      - name: Update pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Check pyinstaller --help
        run: python -m PyInstaller -h

      - name: Install pyglossary dependencies
        run: |
          pip install --progress-bar=off pymorphy2 lxml polib PyYAML beautifulsoup4 html5lib PyICU python-lzo prompt_toolkit gobject pygobject pycairo colorize_pinyin
          pip install --progress-bar=off --upgrade .

      - name: Set Variables
        id: envconf
        run: |
          echo "PREFIX=$(brew --prefix)" >> $GITHUB_ENV
          echo "VERSION=$(git describe --abbrev=0)" >> $GITHUB_ENV
          echo "TAG=$(git describe)" >> $GITHUB_ENV
          
      - name: Prepare PyInstaller build

        run: |
          rm __init__.py

      - name: Pyinstaller Build
        run: |
          pyinstaller --noupx \
            --windowed \
            --noconfirm \
            --osx-bundle-identifier com.github.pyglossary \
            --icon res/pyglossary.icns \
            --collect-submodules pyglossary \
            --collect-all pyglossary \
            --collect-all gi \
            --argv-emulation \
            --hidden-import msvcrt \
            --hidden-import pyglossary \
            --hidden-import platform \
            --hidden-import json \
            --hidden-import __future__ \
            --hidden-import uuid  \
            --hidden-import pkgutil \
            --hidden-import shlex \
            --hidden-import prompt_toolkit \
            --hidden-import Gtk \
            --hidden-import gi \
            --paths '.:pyglossary:pyglossary/ui:pyglossary/plugins:pyglossary/glossary_v2:pyglossary/langs' \
            --name ${{ env.APPNAME }} \
            --distpath ${{ env.DIST_DIR }} \
            --workpath build.pyinstaller \
            pyglossary.pyw
            
      - name: Copy extra files
        run: |
            cp -r {about,AUTHORS,_license-dialog,config.json,plugins-meta,help} $DIST_DIR/$APPNAME.app/Contents/MacOS
            cp -rv _license-dialog ${{ env.DIST_DIR }}/${{ env.APPNAME }}.app/Contents/MacOS/license-dialog
            cp -rv {res,pyglossary} ${{ env.DIST_DIR }}/${{ env.APPNAME }}.app/Contents/MacOS

      - name: Create DMG
        run: |
          create-dmg --volname "PyGlossary ${{ env.APPNAME }}" --volicon res/pyglossary.icns --eula LICENSE  --app-drop-link 50 50 "PyGlossary-macOS-${{ env.TAG }}.dmg" "${{ env.DIST_DIR }}/PyGlossaryMac.app"

            
      - name: Upload Artifacts zip
        uses: actions/upload-artifact@v4
        with:
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
          # branch name: ${{ github.ref_name }}
          name: ${{ github.event.repository.name }}-${{ matrix.os }}-${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
          path: |
            "${{ env.DIST_DIR }}/**/*"
            
      - name: Upload Artifacts DMG
        uses: actions/upload-artifact@v4
        with:
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
          # branch name: ${{ github.ref_name }}
          name: ${{ github.event.repository.name }}-${{ matrix.os }}-${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
          path: |
            '*.dmg'
        
      # - name: Set up extra environment variables (non-Windows)
      #   if: ${{ !startsWith(matrix.os, 'windows') }}
      #   run: |
      #     # Run Qt-based tests with offscreen backend. This seems to break QtWebEngine tests on Windows, so
      #     # apply it only here, in non-Windows path.
      #     echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV

      # # Required on macOS >= 11 by tests that register custom URL schema. This could also be achieved by passing
      # # --basetemp to pytest, but using environment variable allows us to have a unified "Run test" step for
      # # all OSes.
      # #
      # # We now relocate the temporary directory to a fixed location on all OSes, in order to be able to generate
      # # artifacts out of failed tests.
      # - name: Relocate temporary dir
      #   shell: bash
      #   run: |
      #     echo "PYTEST_DEBUG_TEMPROOT=$RUNNER_TEMP" >> $GITHUB_ENV

      # Augment _pyinstaller_hooks_contrib with bogus hooks that conflict with the hooks provided by hooksample.
      # Due to (implicit) hook priority, the 3rd-party hooks should be chosen over _pyinstaller_hooks_contrib
      # ones, and so the bogus hooks should never be ran. This applies to standard module hooks, as well as
      # the pre-find-module-path and pre-safe-import-module hooks.
